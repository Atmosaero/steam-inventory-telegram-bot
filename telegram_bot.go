package main

import (
	"fmt"
	"log"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// InventoryItem –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –¥–ª—è GUI
type InventoryItem struct {
	Name       string  `json:"name"`
	MarketName string  `json:"market_name"`
	Type       string  `json:"type"`
	Price      string  `json:"price"`
	PriceValue float64 `json:"price_value"`
	AssetID    string  `json:"asset_id"`
}

type TelegramBot struct {
	bot         *tgbotapi.BotAPI
	cache       *Cache
	rateLimiter *RateLimiter
}

func NewTelegramBot(token string) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, err
	}

	bot.Debug = false
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", bot.Self.UserName)

	// –°–æ–∑–¥–∞–µ–º –∫—ç—à –Ω–∞ 30 –º–∏–Ω—É—Ç –∏ rate limiter –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã
	cache := NewCache(30 * time.Minute)
	rateLimiter := NewRateLimiter(3 * time.Second)

	return &TelegramBot{
		bot:         bot,
		cache:       cache,
		rateLimiter: rateLimiter,
	}, nil
}

func (tb *TelegramBot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tb.bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			tb.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			tb.handleCallback(update.CallbackQuery)
		}
	}
}

func (tb *TelegramBot) handleMessage(message *tgbotapi.Message) {
	chatID := message.Chat.ID
	text := message.Text

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	if time.Since(message.Time()) > 5*time.Minute {
		return
	}

	switch {
	case text == "/start":
		tb.sendWelcomeMessage(chatID)
	case text == "/help":
		tb.sendHelpMessage(chatID)
	case strings.HasPrefix(text, "/scan"):
		tb.handleScanCommand(chatID, text)
	case strings.HasPrefix(text, "/price"):
		tb.handlePriceCommand(chatID, text)
	default:
		// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Steam ID –∏–ª–∏ —Å—Å—ã–ª–∫—É
		if tb.isSteamInput(text) {
			tb.handleSteamInput(chatID, text)
		} else {
			tb.sendMessage(chatID, "–ù–µ –ø–æ–Ω–∏–º–∞—é –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
		}
	}
}

func (tb *TelegramBot) handleCallback(callback *tgbotapi.CallbackQuery) {
	chatID := callback.Message.Chat.ID
	data := callback.Data

	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
	callbackConfig := tgbotapi.NewCallback(callback.ID, "")
	tb.bot.Request(callbackConfig)

	switch {
	case strings.HasPrefix(data, "scan_"):
		parts := strings.Split(data, "_")
		if len(parts) >= 3 {
			steamID := parts[1]
			appID := parts[2]
			tb.scanInventory(chatID, steamID, appID)
		}
	case data == "help":
		tb.sendHelpMessage(chatID)
	}
}

func (tb *TelegramBot) sendWelcomeMessage(chatID int64) {
	text := `üéÆ *Steam Inventory Bot*

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å Steam –ø—Ä–æ—Ñ–∏–ª—è.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/scan - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/price - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞
/help - –°–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –û—Ç–ø—Ä–∞–≤—å Steam ID –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
2. –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
3. –ü–æ–ª—É—á–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

*–ü—Ä–∏–º–µ—Ä—ã Steam ID:*
‚Ä¢ 76561198111717059
‚Ä¢ https://steamcommunity.com/id/username
‚Ä¢ https://steamcommunity.com/profiles/76561198111717059`

	tb.sendMessage(chatID, text)
}

func (tb *TelegramBot) sendHelpMessage(chatID int64) {
	text := `üìã *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º*

*/scan* - –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scan <steam_id> [app_id]
–ü—Ä–∏–º–µ—Ä: /scan 76561198111717059 730

*/price* - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <market_hash_name>
–ü—Ä–∏–º–µ—Ä: /price "AK-47 | Redline (Field-Tested)"

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã:*
‚Ä¢ CS:GO (730)
‚Ä¢ Dota 2 (570)
‚Ä¢ TF2 (440)
‚Ä¢ Rust (252490)

*–§–æ—Ä–º–∞—Ç—ã Steam ID:*
‚Ä¢ Steam64 ID: 76561198111717059
‚Ä¢ –°—Å—ã–ª–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: https://steamcommunity.com/profiles/76561198111717059
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—Å—ã–ª–∫–∞: https://steamcommunity.com/id/username`

	tb.sendMessage(chatID, text)
}

func (tb *TelegramBot) handleScanCommand(chatID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) < 2 {
		tb.sendMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /scan <steam_id> [app_id]")
		return
	}

	steamID := parts[1]
	appID := "730" // CS:GO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	if len(parts) > 2 {
		appID = parts[2]
	}

	tb.scanInventory(chatID, steamID, appID)
}

func (tb *TelegramBot) handlePriceCommand(chatID int64, text string) {
	parts := strings.Fields(text)
	if len(parts) < 2 {
		tb.sendMessage(chatID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /price <market_hash_name>")
		return
	}

	marketName := strings.Join(parts[1:], " ")
	appID := "730" // CS:GO –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

	tb.sendMessage(chatID, "üîç –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—É...")

	price := getMarketPrice(appID, marketName, false)
	if price == "" {
		tb.sendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è: "+marketName)
		return
	}

	response := fmt.Sprintf("üí∞ *%s*\n–¶–µ–Ω–∞: %s", marketName, price)
	tb.sendMessage(chatID, response)
}

func (tb *TelegramBot) handleSteamInput(chatID int64, text string) {
	// –†–∞–∑—Ä–µ—à–∞–µ–º Steam ID
	resolvedID := resolveSteamID(text)
	if resolvedID == "" {
		tb.sendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å Steam ID")
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
	tb.sendGameSelection(chatID, resolvedID)
}

func (tb *TelegramBot) sendGameSelection(chatID int64, steamID string) {
	text := "üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("CS:GO", fmt.Sprintf("scan_%s_730", steamID)),
			tgbotapi.NewInlineKeyboardButtonData("Dota 2", fmt.Sprintf("scan_%s_570", steamID)),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("TF2", fmt.Sprintf("scan_%s_440", steamID)),
			tgbotapi.NewInlineKeyboardButtonData("Rust", fmt.Sprintf("scan_%s_252490", steamID)),
		),
	)

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	msg.ParseMode = "Markdown"

	tb.bot.Send(msg)
}

func (tb *TelegramBot) scanInventory(chatID int64, steamID, appID string) {
	// –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∫—ç—à–∞
	cacheKey := fmt.Sprintf("%s_%s", steamID, appID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	if cachedData, exists := tb.cache.Get(cacheKey); exists {
		tb.sendMessage(chatID, "‚ö° –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		var totalValue, minPrice, maxPrice float64
		var minItem, maxItem string
		
		for i, item := range cachedData {
			if i == 0 {
				minPrice = item.PriceValue
				maxPrice = item.PriceValue
				minItem = item.Name
				maxItem = item.Name
			}
			
			totalValue += item.PriceValue
			
			if item.PriceValue < minPrice {
				minPrice = item.PriceValue
				minItem = item.Name
			}
			if item.PriceValue > maxPrice {
				maxPrice = item.PriceValue
				maxItem = item.Name
			}
		}
		
		gameName := getGameName(appID)
		response := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è %s* (–∏–∑ –∫—ç—à–∞)

üéÆ –ò–≥—Ä–∞: %s
üì¶ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d
üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %.2f ‚ÇΩ

üìà *–¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %.2f ‚ÇΩ (%s)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %.2f ‚ÇΩ (%s)`,
			steamID, gameName, len(cachedData), totalValue,
			minPrice, minItem, maxPrice, maxItem)
		
		tb.sendMessage(chatID, response)
		
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
		if len(cachedData) > 0 {
			tb.sendTopItems(chatID, cachedData)
		}
		return
	}

	tb.sendMessage(chatID, "üîç –°–∫–∞–Ω–∏—Ä—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...")

	startTime := time.Now()

	// –ñ–¥–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç rate limiter
	tb.rateLimiter.Wait()

	// –†–∞–∑—Ä–µ—à–∞–µ–º Steam ID
	resolvedID := resolveSteamID(steamID)
	if resolvedID == "" {
		tb.sendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å Steam ID")
		return
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	done := make(chan bool, 1)
	var assets []Asset
	var descriptions []Description
	var totalCount int

	go func() {
		contextID := "2"
		assets, descriptions, totalCount = fetchAllInventory(resolvedID, appID, contextID, false)
		done <- true
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞ (2 –º–∏–Ω—É—Ç—ã)
	select {
	case <-done:
		// –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
	case <-time.After(2 * time.Minute):
		tb.sendMessage(chatID, "‚è∞ –¢–∞–π–º–∞—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
		return
	}

	if totalCount == 0 {
		tb.sendMessage(chatID, "‚ùå –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
		return
	}

	tb.sendMessage(chatID, fmt.Sprintf("üì¶ –ù–∞–π–¥–µ–Ω–æ %d –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ü–µ–Ω—ã...", totalCount))

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω (–º–∞–∫—Å–∏–º—É–º 50)
	maxItems := 50
	if len(assets) > maxItems {
		tb.sendMessage(chatID, fmt.Sprintf("‚ö†Ô∏è –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ–ª—å—à–æ–π (%d –ø—Ä–µ–¥–º–µ—Ç–æ–≤). –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ %d –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è.", len(assets), maxItems))
		assets = assets[:maxItems]
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
	items := processInventoryItems(assets, descriptions, appID, false)

	if len(items) == 0 {
		tb.sendMessage(chatID, "‚ùå –ù–µ—Ç –ø—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ")
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	var totalValue, minPrice, maxPrice float64
	var minItem, maxItem string

	for i, item := range items {
		if i == 0 {
			minPrice = item.PriceValue
			maxPrice = item.PriceValue
			minItem = item.Name
			maxItem = item.Name
		}

		totalValue += item.PriceValue

		if item.PriceValue < minPrice {
			minPrice = item.PriceValue
			minItem = item.Name
		}
		if item.PriceValue > maxPrice {
			maxPrice = item.PriceValue
			maxItem = item.Name
		}
	}

	duration := time.Since(startTime)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	gameName := getGameName(appID)
	response := fmt.Sprintf(`üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è %s*

üéÆ –ò–≥—Ä–∞: %s
üì¶ –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: %d
üí∞ –ü—Ä–æ–¥–∞–≤–∞–µ–º—ã—Ö: %d
üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: %.2f ‚ÇΩ

üìà *–¶–µ–Ω–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: %.2f ‚ÇΩ (%s)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: %.2f ‚ÇΩ (%s)

‚è± –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v`,
		steamID, gameName, totalCount, len(items), totalValue,
		minPrice, minItem, maxPrice, maxItem, duration)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
	tb.cache.Set(cacheKey, items)

	tb.sendMessage(chatID, response)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	if len(items) > 0 {
		tb.sendTopItems(chatID, items)
	}
}

func (tb *TelegramBot) sendTopItems(chatID int64, items []InventoryItem) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (—É–±—ã–≤–∞–Ω–∏–µ)
	for i := 0; i < len(items)-1; i++ {
		for j := i + 1; j < len(items); j++ {
			if items[i].PriceValue < items[j].PriceValue {
				items[i], items[j] = items[j], items[i]
			}
		}
	}

	text := "üèÜ *–¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–æ—Ä–æ–≥–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:*\n\n"

	topCount := 5
	if len(items) < topCount {
		topCount = len(items)
	}

	for i := 0; i < topCount; i++ {
		item := items[i]
		text += fmt.Sprintf("%d. *%s*\n   üí∞ %.2f ‚ÇΩ\n\n", i+1, item.Name, item.PriceValue)
	}

	tb.sendMessage(chatID, text)
}

func (tb *TelegramBot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "Markdown"

	_, err := tb.bot.Send(msg)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func (tb *TelegramBot) isSteamInput(text string) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—Ö–æ–∂–µ –ª–∏ –Ω–∞ Steam ID –∏–ª–∏ —Å—Å—ã–ª–∫—É
	return strings.Contains(text, "steamcommunity.com") ||
		strings.HasPrefix(text, "7656119") ||
		len(text) > 10 && strings.Contains(text, "/")
}

func getGameName(appID string) string {
	switch appID {
	case "730":
		return "CS:GO"
	case "570":
		return "Dota 2"
	case "440":
		return "TF2"
	case "252490":
		return "Rust"
	default:
		return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞"
	}
}

func processInventoryItems(assets []Asset, descriptions []Description, appID string, debug bool) []InventoryItem {
	descMap := make(map[string]Description)
	for _, desc := range descriptions {
		key := desc.ClassID + "_" + desc.InstanceID
		descMap[key] = desc
	}

	priceCache := make(map[string]string)
	var items []InventoryItem
	processedCount := 0

	for _, asset := range assets {
		key := asset.ClassID + "_" + asset.InstanceID
		desc, found := descMap[key]

		if !found || desc.Marketable != 1 || desc.MarketHashName == "" {
			continue
		}

		price, cached := priceCache[desc.MarketHashName]
		if !cached {
			price = getMarketPrice(appID, desc.MarketHashName, debug)
			priceCache[desc.MarketHashName] = price
			time.Sleep(3 * time.Second) // –£–º–µ–Ω—å—à–∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∫—É
		}

		if price == "" {
			continue
		}

		priceValue := parsePrice(price)
		item := InventoryItem{
			Name:       desc.Name,
			MarketName: desc.MarketName,
			Type:       desc.Type,
			Price:      price,
			PriceValue: priceValue,
			AssetID:    asset.AssetID,
		}
		items = append(items, item)
		processedCount++

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 –ø—Ä–µ–¥–º–µ—Ç–∞
		if processedCount%3 == 0 {
			time.Sleep(100 * time.Millisecond)
		}
	}

	return items
}

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	botToken := "8232781922:AAH5k5RX9jhG-9oDa7BW5-9DVpK8kiGv3Mg" // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

	bot, err := NewTelegramBot(botToken)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞:", err)
	}

	log.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	bot.Start()
}
